-- haskell code for core proof types of coq extracted recursivly via reflection via metacoq
module Server.MetaCoq.TestMeta6 where
-- the first types of base level 0 have no parameters, they are foundational
data Positive =  XI Positive  | XO Positive  | XH 
data Byte = X00 | X01| YYSpliceByteListIntoHereYY | XHH
--level one have one one dependancy each 
data N =   N0  | Npos Positive  
data Z =   Z0 | Zpos Positive | Zneg Positive
data MyString =   EmptyString | String Byte MyString
data Nat =  O  | S Nat  
-- level 2 dependencies
data TNumRel =   Le Z | Eq0
data UniversalLevel =    Lzero | Level MyString | Lvar Nat
data Prod a b =    Pair a b
-- 3 dependencies
type SortedLevels = Prod UniversalLevel TNumRel
-- 4 dependencies
type TProd_SortedLevels_UniversalLevel = Prod SortedLevels UniversalLevel
type Ident = MyString
type Dirpath = List Ident
type Kername = Prod Modpath Ident
data Modpath =   MPfile Dirpath | MPbound Dirpath Ident Nat | MPdot Modpath Ident
data Tree0 =   Leaf0 | Node0 T0 Tree0 (TProd_SortedLevels_UniversalLevel) Tree0
data TTree =   Leaf | Node T0 Tree UniversalLevel Tree  
type OKername = Option Kername
data TMk_retroknowledge_Kername_Kername_37 = Mk_retroknowledge OKername OKername
data Def term =    Mkdef Binder_annot_Name term term Nat
data Relevance =   Relevant | Irrelevant  
data BinderAnnot a =   MkBindAnn a Relevance 
type ListBinder_annot_Name = List Binder_annot_Name
data Name = NAnon | NNamed Ident
type Binder_annot_Name = Binder_annot Name -- Binder_annot_Name 
type BinderAnnotName = BinderAnnot Name  -- same
type Binder_annot  = BinderAnnot
data Projection_body =   Build_projection_body Ident Relevance Term
data Constructor_body =   Build_constructor_body Ident Context (List Term) Term Nat 
type TNonEmptyLevelExprSet22 = NonEmptyLevelExprSet
type NonEmptyLevelExprSet =   TListElt1_syn2_21-- singleton inductive, whose constructor was Build_nonEmptyLevelExprSet
data TLevelProps_2 =   LProp0 | LSProp0 | LType TNonEmptyLevelExprSet22
data One_inductive_body =   Build_one_inductive_body Ident Context TLevelProps Term Allowed_eliminations  (List Constructor_body) (List Projection_body) Relevance
-- 1. `One_inductive_body`:
--    - This data type represents a single inductive type definition in Coq.
--    - It includes information about the identifier, context, type level properties, term, allowed eliminations, constructors, projections, and relevance of the inductive type.
--    - Inductive types are a fundamental concept in Coq, allowing the definition of data structures that support rigorous reasoning and proofs.
-- 4. `ListOne_inductive_body`:
--    - This data type represents a list of `One_inductive_body` instances.
--    - Lists are a common data structure in functional programming, and in the context of Coq, they are likely used to group and manage multiple inductive type definitions.
data MutualInductiveBody =   Build_mutual_inductive_body Recursivity_kind Nat Context (List One_inductive_body)   Universes_decl (Option (List TVariance_36))
-- 2. `Mutual_inductive_body`:
--    - This data type represents a mutually recursive set of inductive types in Coq.
--    - It contains information about the recursivity kind, context, list of `One_inductive_body` instances, universe declarations, and optional type variance information.
--    - Mutually recursive definitions allow multiple data types to refer to each other, enabling the specification and verification of complex systems.
type Mutual_inductive_body = MutualInductiveBody
data RecursivityKind =   Finite | CoFinite | BiFinite
-- 2. `Context`:
--    - Represents a list of `Context_decl Term` instances.
--    - A context in Coq consists of a list of declarations, which can include variable names, their optional types, and their bound term.
-- 3. `Context_decl term`:
--    - Represents a declaration in a Coq context.
--    - It includes information about a binder (variable name) with annotations, an optional type, and the bound term.
type ListContext_declTerm = List Context_declTerm
type Context = List (Context_decl Term)
type Context_declTerm = Context_decl Term
data Context_decl term =   Mkdecl Binder_annot_Name (Option term) term
data Constant_body =   Build_constant_body Term (Option Term) Universes_decl Relevance
data Global_env =  Mk_global_env TTreeTree0Pair Global_declarations TMk_retroknowledge_Kername_Kername_37
--  Mk_global_env T35 Global_declarations T37
--type TTreeTree0Pair = Prod TTree TTree
type TTreeTree0Pair = Prod TTree Tree0
type T4 = Tree
type T_0 = T4
type T10 = T_0
--type T35=TTreeTree0Pair
type T32 = T_4
type T_4 = T26
type T26 = Tree0
--type T35 = Prod T10 T32
type Global_declarations = List (TGlobalDeclaration)
type TGlobalDeclaration = Prod Kername Global_decl
data Global_decl =    ConstantDecl Constant_body  | InductiveDecl Mutual_inductive_body
data Bool =   True | False  
data Comparison =   Eq | Lt | Gt  


type T25 = TNumRel_25


data List a =   Nil | Cons a (List a)            







data Option a =   Some a | None  







data Sum a b =    Inl a | Inr b ( Generic, Show, Lift,             Data, Typeable)
data T13 =   LSProp | LProp  



data TVariance_36 =   Irrelevant0 | Covariant | Invariant  




type Elt0 = UniversalLevel
type T_ = UniversalLevel
type Elt1 = TUniversalLevelExpressions_14
type Elt2 = TUniversalLevelExpressions_14



data UniversesDecl =   Monomorphic_ctx  
data UniversesDecl =   Monomorphic_ctx--  | Polymorphic_ctx T34  not used 









-- Certainly, let's document these Haskell data types and discuss their potential significance within the context of Coq and formal methods:

-- 1. `Constructor_body`:
--    - Represents the body of a constructor in Coq.
--    - It includes information about the constructor's identifier, context, list of arguments, return type, and arity.

-- Historical Significance and Connection to Coq:
-- - The `Constructor_body` data type reflects the structure of constructors in Coq, which are used to define the different cases of an inductive data type.
-- - Contexts and context declarations are a core concept in Coq and other proof assistants, providing a way to manage variable bindings and their types within a formal system.
-- - Coq's development was influenced by foundational work in higher-order logic and constructive type theory, starting in the 1980s.
-- - The ability to define constructors, contexts, and context declarations contributes to Coq's capabilities for specifying and verifying complex software systems and mathematical proofs.

-- These data types provide a glimpse into the representation and manipulation of constructs used within Coq's formalism. If you have specific questions about these data types, how they are used, or any other related topics, feel free to ask!








type ListConstructor_body = List Constructor_body

type ListElt1 = List Elt1

type ListProjection_body = List Projection_body
type ListTVariance_36 = List TVariance_36

type ListUniversalLevel = List UniversalLevel 




type OptionListTVariance_36 = Option ListTVariance_36


type Recursivity_kind = RecursivityKind
type T33 = UniversalLevels -- 33 is the magic number by the way

type TLevelProps = TLevelProps_2
type TListElt1_18 = List Elt1
type TListElt1_syn2_21 = TListElt1_syn_1
type TListElt1_syn_1 = TListElt1_18



-- type T25 = Prod T25S T3
-- type T3 = T_



type TString =MyString

--type TTree = TTree_syn_0
--type TTree = TTree_syn_4
type TUniversalLevelExpressions_14 = Prod UniversalLevel Nat
type TUniversalLevels = List UniversalLevel 
type UniversalLevel = UniversalLevel
type Universes_decl = UniversesDecl


type BigMama = (Prod Global_env Term)



type OptionTerm = Option Term
type Mfixpoint term = List (Def term)
type ListTerm = List Term
type ListDefTerm = List DefTerm

type DefTerm = Def Term


-- data Term = ...
--  | TCase Case_info (Predicate Term) Term (List (Branch Term))
data CaseInfo =  Mk_case_info Inductive Nat Relevance  
type Case_info = CaseInfo
type PredicateTerm = Predicate Term
data Predicate term =   Mk_predicate TUniversalLevels (List term) (List Binder_annot_Name) term  
type BranchTerm = Branch Term
type ListBranchTerm = List BranchTerm
data Branch term =Mk_branch (List Binder_annot_Name) term

-- data Term ==...   | TProd Binder_annot_Name Term Term
--   | TLambda Binder_annot_Name Term Term
--   | TLetIn Binder_annot_Name Term Term Term
-- Certainly, let's document these Haskell data types and their relationships within the context of Coq and formal methods:

-- 1. `Term`:
--    - Represents different kinds of terms in Coq.
--    - Includes constructors for various term forms such as products (TProd), lambda abstractions (TLambda), and let-in expressions (TLetIn).
--    - These constructors are fundamental building blocks for representing and manipulating expressions in Coq.

-- 2. `Def term`:
--    - Represents a definition in Coq.
--    - It includes a binder (variable name) with an annotation, a term (the definition), a type, and an integer (possibly representing the number of recursive arguments).

-- 3. `BinderAnnot a`:
--    - Represents a binder (variable) with an associated annotation.
--    - The annotation includes the variable's name and its relevance (e.g., whether it's used in a term's type or body).

-- 4. `ListBinder_annot_Name`:
--    - Represents a list of binders with annotations and names.

-- 5. `Binder_annot_Name` / `BinderAnnotName`:
--    - A type alias for binders with annotations and names.

-- 6. `Binder_annot`:
--    - Represents a binder with an annotation.

-- Historical Significance and Connection to Coq:
-- - The `Term` data type embodies Coq's expressive power by capturing various forms of terms and expressions, facilitating rigorous reasoning and formal proofs.
-- - Constructors like `TProd`, `TLambda`, and `TLetIn` correspond to standard constructs used in lambda calculus and type theory, which are foundational to Coq's design.
-- - Definitions (`Def`) play a critical role in formal verification, as they represent the core concepts being reasoned about in a proof.
-- - The notion of annotations and relevance in binders (`BinderAnnot`) is central to Coq's type system, allowing fine-grained control over variable usage and scope.
-- - The usage of `ListBinder_annot_Name`, `Binder_annot_Name`, and `BinderAnnotName` underscores the importance of structured variable binding and annotation in Coq.

-- These data types capture fundamental elements of Coq's syntax and type theory. If you have more questions or if there's a specific aspect you'd like to explore, please feel free to ask!


--Term has two constructors
--  | TInd Inductive TUniversalLevels
--  | TConstruct Inductive Nat TUniversalLevels

data Inductive = MkInd Kername Nat



-- 3. `Projection`:
--    - This data type represents a projection operation for extracting components of an inductive data type.
--    - It includes information about the inductive type, constructor index, and projection index.
--    - Projections are an important aspect of inductive types, allowing access to specific fields or components of complex data structures.


-- Historical Significance:
-- - Coq is a widely used interactive theorem prover and programming language focused on formal verification.
-- - The concept of inductive types and mutual recursion has its roots in mathematical logic and type theory, with influences from Alonzo Church, Kurt Gödel, and others.
-- - Coq's development began in the 1980s, influenced by earlier work on the LCF and ML proof assistants.
-- - The ability to define and reason about inductive types was a major breakthrough, enabling the formal specification and verification of software and mathematical proofs.
-- - Projections play a crucial role in defining and manipulating inductive types, contributing to Coq's expressive power.


data Allowed_eliminations =   IntoSProp | IntoPropSProp | IntoSetPropSProp | IntoAny 

data Projection =   MkProjection Inductive Nat Nat
type ListOne_inductive_body  = List One_inductive_body

type Cast_kind = CastKind
data CastKind =   VmCast | NativeCast | Cast 

data Term = StartOfTermList
  | TInt Prelude.Int
  | TFloat Prelude.Float
  TRel Nat
  | TConst Kername TUniversalLevels
  | TSort TLevelProps
  | TInd Inductive TUniversalLevels  
  | TVar Ident
  | TConstruct Inductive Nat TUniversalLevels
-- reflective 1
  | TEvar Nat (List Term)
  | TProj Projection Term
  | TFix (Mfixpoint Term) Nat
  | TCoFix (Mfixpoint Term) Nat
-- 2
  | TProd Binder_annot_Name Term Term
  | TCast Term Cast_kind Term
  | TLambda Binder_annot_Name Term Term
  | TApp Term (List Term)
-- 3
  | TLetIn Binder_annot_Name Term Term Term
  | TCase Case_info (Predicate Term) Term (List (Branch Term))
  | TCase Case_info (Predicate Term) Term (List (Branch Term))

-- 1. `CaseInfo`:
--    - Represents information about a case analysis during proof construction in Coq.
--    - It includes details about the inductive type, constructor index, and relevance of the case analysis.
--    - Case analysis is a fundamental proof technique in Coq and other theorem provers, enabling the examination of different cases for inductive data types.

-- 2. `Predicate term`:
--    - Defines a predicate that can be used for specifying properties and constraints on terms in Coq.
--    - It consists of information about universal levels, a list of terms, a list of names, and the main predicate term.
--    - Predicates are essential for expressing logical properties and assertions about values in a formal system like Coq.

-- 3. `Branch term`:
--    - Represents a branch in a case analysis, linking a list of names to a specific term.
--    - It is used to define the different branches or cases that arise from a case analysis.
--    - Case analysis and pattern matching are integral to reasoning and proving properties about inductive data types.

-- Historical Significance:
-- - Case analysis and pattern matching are fundamental techniques in formal methods and theorem proving.
-- - The concept of case analysis has its roots in mathematical logic and is essential for reasoning about complex data structures and properties.
-- - Coq's development was influenced by the LCF and ML proof assistants, and it started in the 1980s.
-- - The ability to perform case analyses and define predicates allowed Coq to become a powerful tool for both software verification and formalizing mathematical proofs.
-- - These data types reflect Coq's emphasis on expressing and verifying properties of inductive data types, which has been a cornerstone of formal methods research.


type TNumRel_3 = TNumRel
type TNumRel_syn_24 = TNumRel_3


type TProd_UniversalLevel_TNumRel_25S = SortedLevels
